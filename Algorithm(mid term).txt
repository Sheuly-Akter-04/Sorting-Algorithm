                             ##########    Merge Sort    ###########
#include<iostream>
using namespace std;
void Merge( int A[],int p,int q,int r)
{
	int n1=q-p+1;
	int n2=r-q;
	int *L=new int[n1+1];
	int *R=new int [n2+1];
	int i, j,k;
	for(i=0;i<n1;i++)
	{
		L[i]=A[p+i];
	}
	for(j=0;j<n2;j++)
	{
		R[j]=A[q+1+j];
	}
	L[n1]=INT_MAX;
	R[n2]=INT_MAX;
	i=0;
	j=0;
	for(k=p;k<=r;k++)
	{
		if(L[i]<R[j])
		{

			A[k]=L[i];
		i=i+1;
		}
		else
		{
			A[k]=R[j];
			j=j+1;
		}
	}
}
void Merge_sort( int A[],int p,int r)

{
int q;
if (p<r)
	{q=(p+r)/2;
    Merge_sort(A,p,q);
    Merge_sort(A,q+1,r);
    Merge(A,p,q,r);}
}

	int main()
	{
	int A[5]={9,4,5,2,4};
	Merge_sort(A,0,4);
	for(int i=0;i<5;i++)
	{
		cout<<A[i]<<" ";
	}
	cout<<endl;
	return 0;
   }
                         ########### Count Sort ###########

#include<iostream>
using namespace std;
int k=0;

void Counting_Sort(int A[],int B[],int n)
{
	int C[k];

	for(int i=0;i<k+1;i++)
	{
		C[i]=0;
	}
	for(int j=1;j<=n;j++)
	{

		C[A[j]] = C[A[j]]+1;
	}
	for(int i=1;i<=k;i++)
	{

		C[i]=C[i]+C[i-1];
	}
	for(int j=n;j>=1;j--)
	{
		B[C[A[j]]]=A[j];

		C[A[j]]=C[A[j]]-1;
	}
}
int main()
{
	int n;
	cout<<"Enter the size of the array :";
	cin>>n;

	int A[n],B[n];

	for(int i=1;i<=n;i++)
	{
		cin>>A[i];
		if(A[i]>k)
		{
			k=A[i];
		}
	}
	Counting_Sort(A,B,n);

	for(int i=1;i<=n;i++)
	{
		cout<<B[i]<<" ";
	}

	cout<<endl;
	return 0;
}
                      ########### Greedy Activity ##########

#include<iostream>
using namespace std;
void GreedyActivitySelector(int s[], int f[], int n)

 {
     int m,k;

    cout<<" Activities are selected n"<<endl;

    m=0;
    cout<<m;

    for (k = 1; k < n; k++)
    {
      if (s[k] >= f[m])
        {
          cout<<k;
          m=k;
      }
    }
}

int main()
{
    int s[] = {1,2,5,8,9,0};
    int f[] =  {2,2,4,4,9,9};
    int n = sizeof(s)/sizeof(s[0]);
    GreedyActivitySelector(s, f, n);
    return 0;
}

                         ############ Insertion Sort ############

#include <iostream>
using namespace std;

void InsertionSort(int A[], int n)
{
   int  i ,j, key;
   for (j = 1; j < n; j++)
   {
       key = A[j];
       i = j-1;


       while (i >= 0 && A[i] > key)
       {
           A[i+1] = A[i];
           i = i-1;
       }
       A[i+1] = key;
   }
}


void TheArray(int A[], int n)
{
   int j;
   for (j=0; j< n; j++)
    cout<< " " <<A[j];
    cout<<" ";
}



int main()
{
    int A[] = {22, 99, 1, 5, 8};
    int n = sizeof(A)/sizeof(A[0]);

    InsertionSort(A, n);
    TheArray(A, n);

    return 0;
}


               ############# Bubble sort ###############
#include <iostream>
using namespace std;

void BubbleSort(int A[], int n)
{
   int i = 0, j = 0, tmp;

   for (i = 0; i < n; i++)
        {
      for (j = 0; j < n - i - 1; j++)
       {
            if (A[j] > A[j + 1])
            {
               tmp = A[j];
               A[j] = A[j + 1];
               A[j + 1] = tmp;
           }
       }
   }
}
int main()
{
 int A[100], n, i, d, swap;
 cout<<"Enter number of elements in the array:\n";
 cin>>n;
 cout<<"Enter " " integer number\n"<< n;
 for (i = 0; i < n; i++)
   cin>> A[i];
 BubbleSort(A, n);
 cout<<"The sorted array:\n";
 for (i = 0; i < n; i++)
    cout<<""<< A[i];
 return 0;
}











